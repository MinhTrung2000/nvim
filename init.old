call plug#begin('~/.nvim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug 'ctrlpvim/ctrlp.vim' " fuzzy find files
Plug 'preservim/nerdcommenter'
Plug 'HerringtonDarkholme/yats.vim' " TS Syntax
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'haya14busa/incsearch.vim'
Plug 'terryma/vim-multiple-cursors'
" Plug 'eugen0329/vim-esearch'
Plug 'RRethy/vim-hexokinase'
Plug 'Yggdroot/indentLine'
Plug 'preservim/tagbar'
Plug 'scheakur/vim-scheakur'
Plug 't9md/vim-choosewin'
Plug 'mattn/emmet-vim'
Plug 'SirVer/ultisnips'
Plug 'ludovicchabant/vim-gutentags'
call plug#end()

set nocompatible
set encoding=utf-8
set mouse=a
set number
set relativenumber
set smarttab
set cindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set textwidth=79
set noexpandtab
set noswapfile
set nowrap
set nojoinspaces
set termguicolors
set autoindent
set smartindent
set shiftround
set undofile
set noignorecase
set undodir=$HOME/.config/nvim/undo
set undolevels=1000
set clipboard=unnamedplus
filetype plugin indent on

nmap <F8> :TagbarToggle<CR>
nmap <F7> :!google-chrome %<CR>
autocmd FileType python nmap <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>

colorscheme gruvbox
set background=dark

" set background=light
" colorscheme scheakur

let g:choosewin_overlay_enable = 1
nmap <leader>ww :ChooseWin<CR>

"Vim color highlighting
let g:Hexokinase_highlighters = ['virtual']
let g:Hexokinase_virtualText = '▩'

" Add space after comment tag
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Airline config.
let g:airline#extensions#tabline#enabled = 1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline_detect_spell = 0
let g:airline#extensions#fzf#enabled = 0
let g:airline#extensions#gutentags#enabled = 0
let g:airline#extensions#hunks#enabled = 0
let g:airline_detect_paste = 0
let g:airline_detect_modified = 0
let g:airline_detect_crypt = 0

nmap <leader>tp <Plug>AirlineSelectPrevTab<CR>
nmap <leader>tn <Plug>AirlineSelectNextTab<CR>

let g:ale_fixers = {
	\'javascript': ['prettier', 'eslint'],
	\'json': ['prettier', 'jsonlint'],
	\'typescript': ['prettier', 'tslint'],
	\'css': ['prettier'],
	\'html': ['prettier'],
	\'graphql': ['prettier', 'eslint'],
	\'python': ['autopep8', 'black', 'isort', 'autoimport', 'yapf']
	\}
let g:ale_fix_on_save = 1
let g:ale_completion_autoimport = 1
let g:ale_disable_lsp = 1
let g:ale_sign_error = '❌'
let g:ale_sign_warning = ' '
let g:airline#extensions#ale#enabled = 1
" Navigate between errors.
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

"Auto remove trailing spaces
autocmd BufWritePre * %s/\s\+$//e

" Esearch config
" let g:esearch = {
  " \ 'adapter': 'rg', \ 'backend': 'nvim'
  " \}
" call esearch#out#win#map('<enter>', 'tab')

" Indent Guide
let g:indentLine_char = '│'
" For dark theme
let g:indentLine_color_gui = '#363442'
" For light theme
" let g:indentLine_color_gui = '#e6ebf2'

"Avoid <ESC> by using jk
inoremap jk <ESC>

nnoremap <ESC><ESC> :nohlsearch<CR>

" In Visual Mode, press 'p' to delete selected text (to blackhold reg: "_) and print
vnoremap p "_dP

set whichwrap+=h,l

nmap tt :NERDTreeToggle<CR>
vmap ++ <Plug>NERDCommenterToggle<CR>
nmap ++ <Plug>NERDCommenterToggle<CR>

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

let g:NERDTreeGitStatusWithFlags = 1
" let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" let g:NERDTreeGitStatusNodeColorization = 1
" let g:NERDTreeColorMapCustom = {
"   \ "Staged"    : "#0ee375",
"   \ "Modified"  : "#d9bf91",
"   \ "Renamed"   : "#51C9FC",
"   \ "Untracked" : "#FCE77C",
"   \ "Unmerged"  : "#FC51E6",
"   \ "Dirty"     : "#FFBD61",
"   \ "Clean"     : "#87939A",
"   \ "Ignored"   : "#808080"
"   \ }

" NERDTree config
let g:NERDTreeIgnore = ['^node_modules$','\.pyc$', '\.pyo$', '^__pycache__$', '\~$']
let NERDTreeMinimalUI = 1

" vim-prettier
" let g:prettier#quickfix_enabled = 0
" let g:prettier#quickfix_auto_focus = 0
" prettier command for coc
command! -nargs=0 Prettier :CocCommand prettier.formatFile
nmap <F6> :CocCommand prettier.formatFile
" run prettier on save
" let g:prettier#autoformat = 0

" ctrlp
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_map = '<c-p>'

"Config python3 env
let g:python3_host_prog = "$HOME/anaconda3/bin/python3"

" Check syntax after loading buffer
" let g:syntastic_always_populate_loc_list = 0
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" " let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_python_checkers = ['flake8', 'pydocstyle']
" let g:syntastic_json_checkers = ['jsonlint']
" Don't put icons on the sign column (it hides the vcs status icons of signify)
" let g:syntastic_enable_signs = 1
" let g:syntastic_error_symbol = '✗'
" let g:syntastic_warning_symbol = '⚠'
" let g:syntastic_style_error_symbol = '✗'
" let g:syntastic_style_warning_symbol = '⚠'
" " See more syntastic_stl_format
" Custom icon for coc.nvim statusline
" let g:coc_status_error_sign=" "
" let g:coc_status_warning_sign=" "

" Sync open file with NERDTree
" Check if NERDTree is open or active
function! IsNERDTreeOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

"Call NERDTree iff NERDTree is active, current window contains a modifiable
"file, and we're not in vimdiff
function! SyncTree()
  if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
      NERDTreeFind
      " Move cursor back to preview window (active buffer) after :NERDTreeFind
      wincmd p
  endif
endfunction

let g:webdevicons_enable_nerdtree = 1

" coc config
let g:coc_global_extensions = [
\ 'coc-snippets',
\ 'coc-pairs',
\ 'coc-tsserver',
\ 'coc-eslint',
\ 'coc-prettier',
\ 'coc-json',
\ 'coc-html',
\ 'coc-python'
\ ]

"From readme coc.nvim
"If hidden is not set, TextEdit might fall
set hidden
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

"Enable folding
set foldmethod=indent
set foldlevel=99

set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
		\ pumvisible() ? "\<C-n>" :
		\ <SID>check_back_space() ? "\<TAB>" :
		\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <F2> <Plug>(coc-rename)

" Remap for format selected region
" xmap <leader>f <Plug>(coc-format-selected)
" nmap <leader>f <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, ' ') . ' ' . get(g:, 'coc_status', '')
endfunction

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{StatusDiagnostic()}

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p :<C-u>CocListResume<CR>

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

"Set the proper PEP8 indentation
au BufNewFile,BufRead *.py:
  \ set tabstop=4
  \ set softtabstop=4
  \ set shiftwidth=4
  \ set fileformat=unix
  " \ set textwidth=79
  " \ set expandtab

function! DeleteCurrentFileAndBuffer()
  call delete(expand('%'))
  bdelete!
endfunction

"Key binding
let mapleader=" "
nnoremap <Leader>wh :wincmd h<CR>
nnoremap <Leader>wl :wincmd l<CR>
nnoremap <Leader>wk :wincmd k<CR>
nnoremap <Leader>wj :wincmd j<CR>
nnoremap <Leader>w= :wincmd =<CR>
" nnoremap <Leader>wb :e#<CR>
nnoremap <Leader>qk :call DeleteCurrentFileAndBuffer()<CR>
nnoremap <Leader>ss :mksession! .vimsession<CR>
nnoremap <Leader>sr :so .vimsession<CR>
nmap <F1> :e ~/.config/nvim/init.vim<CR>
" nnoremap <Leader>n :NERDTree<CR>
" nnoremap <Leader>f :NERDTreeFind<CR>
" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * silent NERDTreeMirror
"Buffer
" nnoremap <Leader>tn :tabn<CR>
" nnoremap <Leader>tp :tabp<CR>
" nnoremap <Leader>tw :tabe<CR>
" nnoremap <Leader>tc :tabclose<CR>

" nnoremap <silent> <c-\> :call esearch#init()<CR>

" Turn off whitespaces compare and folding in vimdiff
set splitright
silent! set splitvertical
set diffopt+=iwhite
set diffopt+=vertical
nnoremap <Leader>1 :diffget 1<CR>:diffupdate<CR>
nnoremap <Leader>2 :diffget 2<CR>:diffupdate<CR>

" Multiple Cursor
" let g:multi_cursor_use_default_mapping = 0
" let g:multi_cursor_start_word_key      = '<C-n>'
" let g:multi_cursor_select_all_word_key = '<A-n>'
" let g:multi_cursor_start_key           = 'g<C-n>'
" let g:multi_cursor_select_all_key      = 'g<A-n>'
" let g:multi_cursor_next_key            = '<C-n>'
" let g:multi_cursor_prev_key            = '<C-v>'
" let g:multi_cursor_skip_key            = '<C-x>'
" let g:multi_cursor_quit_key            = '<Esc>'

" Don't use recording
map q <Nop>
